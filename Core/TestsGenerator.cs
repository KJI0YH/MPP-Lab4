using Dataflow;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace Core
{
    public class TestsGenerator
    {
        public IEnumerable<FileWithContent> Generate(string source)
        {

            CompilationUnitSyntax root = CSharpSyntaxTree.ParseText(source).GetCompilationUnitRoot();

            var usings = root.DescendantNodes().OfType<UsingDirectiveSyntax>();
            var classes = root.DescendantNodes().OfType<ClassDeclarationSyntax>()
                .Where(@class => @class.Modifiers.Any(SyntaxKind.PublicKeyword))
                .Where(@class => !@class.Modifiers.Any(SyntaxKind.StaticKeyword)).ToList();

            return classes.Select(CreateTestClass).ToList();
        }

        private FileWithContent CreateTestClass(ClassDeclarationSyntax classDeclaration)
        {
            var unit = SyntaxFactory.CompilationUnit();
            var methods = CreateTestMethods(classDeclaration);
            unit.AddMembers(methods);

            return new FileWithContent("a", unit.NormalizeWhitespace().ToFullString());
        }

        private MemberDeclarationSyntax[] CreateTestMethods(SyntaxNode syntaxNode)
        {
            var methods = syntaxNode.DescendantNodes().OfType<MethodDeclarationSyntax>()
                .Where(method => method.Modifiers.Any(SyntaxKind.PublicKeyword));

            return methods.Select(CreateTestMethod).ToArray();
        }

        private MemberDeclarationSyntax CreateTestMethod(MethodDeclarationSyntax method)
        {
            // Generate attributes
            var attribute = SingletonList(AttributeList(SingletonSeparatedList(
                Attribute(IdentifierName("Test"))))
                .WithCloseBracketToken(Token(TriviaList(), SyntaxKind.CloseBracketToken, TriviaList(CarriageReturnLineFeed))));

            // Generate modifiers
            var modifiers = TokenList(Token(TriviaList(), SyntaxKind.PublicKeyword, TriviaList(Space)));

            // Generate return type
            var returnType = PredefinedType(Token(TriviaList(), SyntaxKind.VoidKeyword, TriviaList()));

            // Generate identifier
            var identifier = Identifier(TriviaList(SyntaxFactory.Space), method.Identifier.Text + "_Test", TriviaList());

            // Generate body
            var body = Block(ExpressionStatement(
                InvocationExpression(
                    MemberAccessExpression(
                        SyntaxKind.SimpleMemberAccessExpression, IdentifierName(Identifier(TriviaList(Tab), "Assert", TriviaList())), IdentifierName("Fail")))
                .WithArgumentList(ArgumentList(SingletonSeparatedList(
                    Argument(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal("autogenerated"))))))))
                .WithOpenBraceToken(Token(TriviaList(), SyntaxKind.OpenBraceToken, TriviaList(CarriageReturnLineFeed)))
                .WithCloseBraceToken(Token(TriviaList(CarriageReturnLineFeed), SyntaxKind.CloseBraceToken, TriviaList()));

            // Generate test method
            var unit = SyntaxFactory.MethodDeclaration(returnType, identifier)
                .WithAttributeLists(attribute)
                .WithModifiers(modifiers)
                .WithParameterList(method.ParameterList)
                .WithBody(body);


            var str = unit.ToFullString();

            return unit;
        }


    }
}
